class Node
{
	int data;
	Node next;
	public Node()
	{
		this.next=null;
	}
	
	public Node(int data)
	{
		this.data=data;
		this.next=null;
	}
}



public class OddEven 
{
	public static boolean hasCycle(Node start)
	{
		if(start==null || start.next==null)
			return false;
		
		Node slow=start;
		Node fast=start;
		// if slow and past pointer ever meet then list has a cycle
		while(fast!=null && fast.next!=null)
		{
			slow=slow.next;
			fast=fast.next.next;
			if(slow==fast)
			{
				return true;
			}
		}
		return false;
	}

	public static Node OddEvenList(Node start)
	{
		if(start==null)
			return null;

		Node temp=start;
		Node even=start;
		Node odd=start;

		int i=0;
		while(temp!=null)
		{
			if(i%2==0)
			{
				even.next=temp;
				even=even.next;
			}
			else
			{
				odd.next=temp;
				odd=odd.next;
			}
			temp=temp.next;
			i++;
		}

	}
	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		Node A=new Node(1);
		A.next=new Node(2);
		A.next.next=new Node(3);
		A.next.next.next=new Node(4);
		A.next.next.next.next=new Node(5);
		A.next.next.next.next.next=new Node(6);

		OddEvenList(A);

	}

}
